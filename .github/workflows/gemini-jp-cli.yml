name: '💬 Gemini CLI (日本語版)'

on:
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'
  issue_comment:
    types:
      - 'created'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  gemini-cli-jp:
    # この条件は信頼できるユーザーによってアクションがトリガーされた場合のみ実行されるようにします。
    # プライベートリポジトリの場合、リポジトリにアクセスできるユーザーは信頼できるとみなされます。
    # パブリックリポジトリの場合、メンバー、オーナー、またはコラボレーターが信頼できるとみなされます。
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issues' && github.event.action == 'opened' &&
        contains(github.event.issue.body, '@gemini-jp-cli') &&
        !contains(github.event.issue.body, '@gemini-jp-cli /review') &&
        !contains(github.event.issue.body, '@gemini-jp-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association)
        )
      ) ||
      (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        contains(github.event.comment.body, '@gemini-jp-cli') &&
        !contains(github.event.comment.body, '@gemini-jp-cli /review') &&
        !contains(github.event.comment.body, '@gemini-jp-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@gemini-jp-cli') &&
        !contains(github.event.review.body, '@gemini-jp-cli /review') &&
        !contains(github.event.review.body, '@gemini-jp-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
        )
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'GitHub App トークンを生成'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'イベントからコンテキストを取得'
        id: 'get_context'
        env:
          EVENT_NAME: '${{ github.event_name }}'
          EVENT_PAYLOAD: '${{ toJSON(github.event) }}'
        run: |-
          set -euo pipefail

          USER_REQUEST=""
          ISSUE_NUMBER=""
          IS_PR="false"

          if [[ "${EVENT_NAME}" == "issues" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
          elif [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
            if [[ $(echo "${EVENT_PAYLOAD}" | jq -r .issue.pull_request) != "null" ]]; then
              IS_PR="true"
            fi
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .review.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          fi

          # ユーザーリクエストをクリーンアップ
          USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/.*@gemini-jp-cli//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # GITHUB_OUTPUTへの書き込みをheredoc形式に変更して、特殊文字によるエラーを回避
          {
            echo 'user_request<<EOF'
            echo "${USER_REQUEST}"
            echo 'EOF'
            echo "issue_number=${ISSUE_NUMBER}"
            echo "is_pr=${IS_PR}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'コミット用のgitユーザーを設定'
        run: |-
          git config --global user.name 'gemini-cli-jp[bot]'
          git config --global user.email 'gemini-cli-jp[bot]@users.noreply.github.com'

      - name: 'PRブランチをチェックアウト'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'true' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.issue_number }}/head'
          fetch-depth: 0

      - name: 'メインブランチをチェックアウト'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'false' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          fetch-depth: 0

      - name: 'リクエストを確認'
        env:
          GITHUB_ACTOR: '${{ github.actor }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} リクエストを受け取りました。今から作業を開始します！ 🤖"
          if [[ -n "${MESSAGE}" ]]; then
            gh issue comment "${ISSUE_NUMBER}" \
              --body "${MESSAGE}" \
              --repo "${REPOSITORY}"
          fi

      - name: '説明を取得'
        id: 'get_description'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            DESCRIPTION=$(gh pr view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          else
            DESCRIPTION=$(gh issue view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          fi
          {
            echo "description<<EOF"
            echo "${DESCRIPTION}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'コメントを取得'
        id: 'get_comments'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            COMMENTS=$(gh pr view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          else
            COMMENTS=$(gh issue view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          fi
          {
            echo "comments<<EOF"
            echo "${COMMENTS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Geminiを実行'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": ${{ fromJSON(env.DEBUG || env.ACTIONS_STEP_DEBUG || false) }},
              "maxSessionTurns": 50,
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
          prompt: |-
            ## 🤖 役割
            
            あなたはGitHubワークフローのCLIインターフェース経由で呼び出される親切なAIアシスタントです。リポジトリとやり取りし、ユーザーに応答するためのツールを使用できます。
            
            ## 📋 コンテキスト
            
            - **リポジトリ**: `${{ github.repository }}`
            - **トリガーイベント**: `${{ github.event_name }}`
            - **Issue/PR番号**: `${{ steps.get_context.outputs.issue_number }}`
            - **これはPRですか？**: `${{ steps.get_context.outputs.is_pr }}`
            - **Issue/PRの説明**:
            `${{ steps.get_description.outputs.description }}`
            - **コメント**:
            `${{ steps.get_comments.outputs.comments }}`
            
            ## ユーザーリクエスト
            
            ユーザーから以下のリクエストが送信されました：
            `${{ steps.get_context.outputs.user_request }}`
            
            ## 🚀 Issue、PRコメント、質問への応答方法
            
            このワークフローは3つの主要なシナリオをサポートしています：
            
            ### 1. **Issueの修正を作成**
               - ユーザーリクエストと関連するIssueまたはPRの説明を注意深く読んでください。
               - 利用可能なツールを使用してすべての関連コンテキストを収集してください（例：`gh issue view`、`gh pr view`、`gh pr diff`、`cat`、`head`、`tail`）。
               - 先に進む前に問題の根本原因を特定してください。
               - **📋 チェックリストとして計画を表示し維持してください**：
                 - 最初に、Issueまたはリクエストを解決するために必要なステップを概説し、IssueまたはPRにチェックリストコメントとして投稿してください（GitHubマークダウンのチェックボックスを使用：`- [ ] タスク`）。
                 - 例：
                   ```
                   ### 📋 計画
                   - [ ] 根本原因の調査
                   - [ ] `file.py`での修正の実装
                   - [ ] テストの追加/修正
                   - [ ] ドキュメントの更新
                   - [ ] 修正の確認とIssueのクローズ
                   ```
                 - 使用：`gh pr comment "${ISSUE_NUMBER}" --body "<plan>"`または`gh issue comment "${ISSUE_NUMBER}" --body "<plan>"`で初期計画を投稿。
                 - 進捗に応じて、同じコメントを編集してチェックリストを最新かつ見やすく保ってください（完了したタスクに`- [x]`をチェック）。
                   - チェックリストを更新するには：
                     1. チェックリストのコメントIDを見つけます（`gh pr comment list "${ISSUE_NUMBER}"`または`gh issue comment list "${ISSUE_NUMBER}"`を使用）。
                     2. 更新されたチェックリストでコメントを編集します：
                        - PRの場合：`gh pr comment --edit <comment-id> --body "<updated plan>"`
                        - Issueの場合：`gh issue comment --edit <comment-id> --body "<updated plan>"`
                     3. チェックリストはIssueまたはPRのコメントとしてのみ維持されるべきです。コードファイルでチェックリストを追跡または更新しないでください。
               - 修正にコードの変更が必要な場合は、影響を受けるファイルと行を特定してください。明確化が必要な場合は、ユーザーへの質問をメモしてください。
               - 利用可能なツール（例：`write_file`）を使用して必要なコードまたはドキュメントの変更を行ってください。すべての変更がプロジェクトの規約とベストプラクティスに従っていることを確認してください。エラーを防ぐため、すべてのシェル変数を`"${VAR}"`（引用符と波括弧付き）として参照してください。
               - 修正が意図通りに動作することを確認するために、関連するテストまたはチェックを実行してください。可能であれば、Issueが解決されたという証拠（テスト出力、スクリーンショットなど）を提供してください。
               - **ブランチ作成とコミット**：
                 - **決して`main`ブランチに直接コミットしないでください。**
                 - **プルリクエスト**（`IS_PR`が`true`）で作業している場合、正しいブランチは既にチェックアウトされています。単純にコミットしてプッシュしてください。
                   - `git add .`
                   - `git commit -m "✨ feat: <変更の説明>"`
                   - `git push`
                 - **Issue**（`IS_PR`が`false`）で作業している場合、変更のための新しいブランチを作成してください。適切なブランチ名は`issue/${ISSUE_NUMBER}/<短い説明>`です。
                   - `git checkout -b issue/${ISSUE_NUMBER}/my-fix`
                   - `git add .`
                   - `git commit -m "✨ feat: <修正の説明>"`
                   - `git push origin issue/${ISSUE_NUMBER}/my-fix`
                   - プッシュ後、プルリクエストを作成できます：`gh pr create --title "🔧 Fixes #${ISSUE_NUMBER}: <短いタイトル>" --body "✨ このPRはIssue #${ISSUE_NUMBER}に対処します。"`
               - マークダウンファイルで何が変更され、その理由を要約してください：`write_file("response.md", "<ここにあなたの応答>")`
               - 応答をコメントとして投稿：
                 - PRの場合：`gh pr comment "${ISSUE_NUMBER}" --body-file response.md`
                 - Issueの場合：`gh issue comment "${ISSUE_NUMBER}" --body-file response.md`
            
            ### 2. **プルリクエストのコメントに対処**
               - 特定のコメントとPRのコンテキストを読んでください。
               - `gh pr view`、`gh pr diff`、`cat`などのツールを使用してコードと議論を理解してください。
               - コメントが変更や明確化を求めている場合、Issueの修正と同じプロセスに従ってください：チェックリスト計画を作成し、実装し、テストし、必要な変更をコミットし、進行に応じてチェックリストを更新してください。
               - **変更のコミット**：正しいPRブランチは既にチェックアウトされています。単純に変更を追加、コミット、プッシュしてください。
                 - `git add .`
                 - `git commit -m "🔧 fix: レビューコメントに対処"`
                 - `git push`
               - コメントが質問の場合、必要に応じてコードまたはドキュメントを参照して、直接的かつ明確に答えてください。
               - `response.md`で応答を文書化し、PRコメントとして投稿：`gh pr comment "${ISSUE_NUMBER}" --body-file response.md`
            
            ### 3. **Issueの任意の質問に答える**
               - `gh issue view`および関連ツールを使用して、質問と完全なIssueコンテキストを読んでください。
               - 正確な回答を提供するために、必要に応じてコードベースを研究または分析してください。
               - 質問にコードまたはドキュメントの変更が必要な場合、上記の修正プロセスに従い、チェックリスト計画の作成と更新、および**セクション1で説明されている変更のための新しいブランチの作成**を含めてください。
               - `response.md`で明確で簡潔な回答を書き、Issueコメントとして投稿：`gh issue comment "${ISSUE_NUMBER}" --body-file response.md`
            
            ## ガイドライン
            
            - **簡潔で実行可能であること。** ユーザーの問題を効率的に解決することに焦点を当ててください。
            - **コードまたはドキュメントを修正した場合は、常に変更をコミットしてプッシュしてください。**
            - **修正や回答について不明な場合は、あなたの推論を説明し、明確化の質問をしてください。**
            - **プロジェクトの規約とベストプラクティスに従ってください。**
            - **応答には適切な絵文字を使用して、親しみやすい雰囲気を作ってください。** ただし、過度な使用は避けてください。
            - **成功時には 🎉、警告時には ⚠️ などの絵文字を効果的に使用してください。**
            
            ### 💾 コミットメッセージの絵文字ガイド
            コミットメッセージには以下の絵文字を活用してください：
            - `✨ feat:` - 新機能の追加
            - `🔧 fix:` - バグ修正
            - `📝 docs:` - ドキュメントの更新
            - `🎨 style:` - コードフォーマット、スタイル変更
            - `♻️ refactor:` - リファクタリング
            - `✅ test:` - テストの追加・修正
            - `🚀 perf:` - パフォーマンス改善
            - `🔧 chore:` - ビルドプロセスや補助ツールの変更
            
            ### 🔄 プルリクエストの絵文字ガイド
            プルリクエストのタイトルと説明には以下の絵文字を活用してください：
            - `🔧 Fix #123:` - バグ修正PR
            - `✨ Feature #123:` - 新機能PR
            - `📝 Docs #123:` - ドキュメント更新PR
            - `♻️ Refactor #123:` - リファクタリングPR
            - `🚀 Performance #123:` - パフォーマンス改善PR
            
            すべての応答とコメントは日本語で行ってください。🇯🇵
