name: "üìù Gemini Release Notes"

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  # Áí∞Â¢ÉÂ§âÊï∞„ÅßÂà∂Âæ°ÂèØËÉΩ„Å™Ë®≠ÂÆö
  MAX_COMMITS: 300
  MAX_FILES: 500
  MAX_CONTRIBUTORS: 200
  MAX_DIFF_LINES: 2000  # Êñ∞Ë¶èËøΩÂä†: Â∑ÆÂàÜ„ÅÆÊúÄÂ§ßË°åÊï∞

jobs:
  release-notes:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout default branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Prepare context
        id: ctx
        env:
          REPOSITORY: "${{ github.repository }}"
          TAG_NAME: "${{ github.ref_name }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MAX_COMMITS: "${{ env.MAX_COMMITS }}"
          MAX_FILES: "${{ env.MAX_FILES }}"
          MAX_CONTRIBUTORS: "${{ env.MAX_CONTRIBUTORS }}"
          MAX_DIFF_LINES: "${{ env.MAX_DIFF_LINES }}"
        run: |
          set -euo pipefail

          TAG="${TAG_NAME}"
          git fetch --tags --prune --force >/dev/null 2>&1 || true

          # Try to get previous released tag (from Releases). Fallback to previous git tag reachable from current.
          PREV_RELEASE_TAG="$(gh release list --limit 100 --json tagName --jq 'map(.tagName) | map(select(. != env.TAG)) | .[0]' || true)"
          if [[ -z "${PREV_RELEASE_TAG}" || "${PREV_RELEASE_TAG}" == "null" ]]; then
            PREV_RELEASE_TAG="$(git describe --tags --abbrev=0 "${TAG}^" 2>/dev/null || true)"
          fi

          BASE_RANGE=""
          COMPARE_URL=""
          if [[ -n "${PREV_RELEASE_TAG}" ]]; then
            BASE_RANGE="${PREV_RELEASE_TAG}..${TAG}"
            COMPARE_URL="https://github.com/${REPOSITORY}/compare/${PREV_RELEASE_TAG}...${TAG}"
          else
            # Initial release: include history up to the tag commit
            BASE_RANGE="${TAG}"
          fi

          # Collect data (trim to keep prompt concise)
          COMMITS="$(git log --no-merges --pretty=format:'- %s (%h) by %an' ${BASE_RANGE} | head -n ${MAX_COMMITS} || true)"
          CHANGED_FILES="$( ( [[ -n "${PREV_RELEASE_TAG}" ]] && git diff --name-only ${BASE_RANGE} || git ls-tree -r --name-only HEAD ) | sed 's/^/- /' | head -n ${MAX_FILES} || true)"
          CONTRIBUTORS="$(git log --format='%an' ${BASE_RANGE} | sort -u | sed 's/^/- /' | head -n ${MAX_CONTRIBUTORS} || true)"
          
          # üî• Êñ∞Ë¶èËøΩÂä†: ÂÆüÈöõ„ÅÆ„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„ÇíÂèñÂæó
          echo "Collecting code diff (max ${MAX_DIFF_LINES} lines)..."
          if [[ -n "${PREV_RELEASE_TAG}" ]]; then
            # Ââç„ÅÆ„É™„É™„Éº„Çπ„Å®„ÅÆÂ∑ÆÂàÜ
            DIFF_CONTENT="$(git diff ${BASE_RANGE} | head -n ${MAX_DIFF_LINES} || true)"
            DIFF_STATS="$(git diff --stat ${BASE_RANGE} | head -n 100 || true)"
          else
            # ÂàùÂõû„É™„É™„Éº„Çπ: ÂÖ®„Éï„Ç°„Ç§„É´ÂÜÖÂÆπÔºàÂà∂Èôê‰ªò„ÅçÔºâ
            DIFF_CONTENT="$(git show --format="" --name-status HEAD | head -n ${MAX_DIFF_LINES} || true)"
            DIFF_STATS="$(git ls-tree -r --name-only HEAD | wc -l) files in initial release"
          fi

          {
            echo "tag=${TAG}"
            echo "prev_tag=${PREV_RELEASE_TAG}"
            echo "compare_url=${COMPARE_URL}"
            echo 'commits<<EOF'
            echo "${COMMITS}"
            echo 'EOF'
            echo 'files<<EOF'
            echo "${CHANGED_FILES}"
            echo 'EOF'
            echo 'contributors<<EOF'
            echo "${CONTRIBUTORS}"
            echo 'EOF'
            echo 'diff_stats<<EOF'
            echo "${DIFF_STATS}"
            echo 'EOF'
            echo 'diff_content<<EOF'
            echo "${DIFF_CONTENT}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

          echo "‚úÖ Collected context:"
          echo "  - Commits: $(echo "${COMMITS}" | wc -l) entries"
          echo "  - Files: $(echo "${CHANGED_FILES}" | wc -l) entries"
          echo "  - Contributors: $(echo "${CONTRIBUTORS}" | wc -l) entries"
          echo "  - Diff content: $(echo "${DIFF_CONTENT}" | wc -l) lines"

      - name: Build release image prompt
        id: build_image_prompt
        env:
          TAG: "${{ steps.ctx.outputs.tag }}"
          REPOSITORY: "${{ github.repository }}"
        run: |
          set -euo pipefail
          TEMPLATE=".github/prompts/release-image.en.txt"
          if [[ ! -f "${TEMPLATE}" ]]; then
            echo "Prompt template not found: ${TEMPLATE}" >&2
            exit 1
          fi
          
          # Extract repository name and transform it
          # e.g., "owner/my-awesome-repo" -> "my-awesome-repo" -> "MY AWESOME REPO"
          REPO_NAME="${REPOSITORY##*/}"  # Remove owner/ prefix
          REPO_DISPLAY=$(echo "${REPO_NAME}" | tr '-' ' ' | tr '[:lower:]' '[:upper:]')
          
          echo "Repository: ${REPOSITORY}"
          echo "Repository name: ${REPO_NAME}" 
          echo "Display name: ${REPO_DISPLAY}"
          echo "Tag: ${TAG}"
          
          # Replace placeholders using environment variables for Perl
          # - v0.0.0 -> actual tag (e.g., v0.2.0)
          # - GEMINI ACTIONS LAB -> transformed repository name
          PROMPT=$(TAG="${TAG}" REPO_DISPLAY="${REPO_DISPLAY}" perl -pe '
            s/\bv0\.0\.0\b/\Q$ENV{TAG}\E/g;
            s/\bGEMINI ACTIONS LAB\b/\Q$ENV{REPO_DISPLAY}\E/g;
          ' "${TEMPLATE}")
          
          {
            echo 'image_prompt<<EOF'
            echo "${PROMPT}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          
          echo "‚úÖ Processed image prompt template with replacements"

      - name: Create image output directory
        id: outdir
        run: |
          set -euo pipefail
          ts=$(date +%Y%m%d_%H%M%S)
          dir="generated-images/release-${{ steps.ctx.outputs.tag }}-${ts}"
          mkdir -p "${dir}"
          echo "OUTPUT_DIR=${dir}" >> "$GITHUB_OUTPUT"
          echo "Created ${dir}"

      - name: Generate release image via Gemini CLI (+ Imagen MCP)
        uses: google-github-actions/run-gemini-cli@v0
        env:
          IMAGE_PROMPT: "${{ steps.build_image_prompt.outputs.image_prompt }}"
        with:
          gemini_api_key: "${{ secrets.GEMINI_API_KEY }}"
          gemini_model: gemini-2.5-flash
          gemini_debug: true
          settings: |
            {
              "mcpServers": {
                "gemini-imagen": {
                  "command": "npx",
                  "args": ["-y", "gemini-imagen-mcp-server",
                           "--output-dir", "${{ steps.outdir.outputs.OUTPUT_DIR }}",
                           "--model", "imagen-4-ultra"],
                  "env": { "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}" },
                  "trust": true,
                  "includeTools": ["generate_image"]
                }
              }
            }
          prompt: |
            Use the @gemini-imagen.generate_image tool to generate 1 image
            from this prompt: "${{ env.IMAGE_PROMPT }}".
            Use aspect ratio "16:9".
            Save files under ./${{ steps.outdir.outputs.OUTPUT_DIR }} and list only the filenames.

      - name: Verify release image files
        run: |
          set -euo pipefail
          dir="${{ steps.outdir.outputs.OUTPUT_DIR }}"
          if [[ ! -d "${dir}" ]]; then
            echo "${dir} not found"; exit 1
          fi
          echo "== Generated files =="
          ls -lh "${dir}"
          cnt=$(ls -1 "${dir}" | wc -l)
          if [[ "${cnt}" -lt 1 ]]; then
            echo "No images were generated"; exit 1
          fi
          echo "‚úÖ Successfully generated ${cnt} file(s)"

      - name: Add image metadata file
        run: |
          set -euo pipefail
          dir="${{ steps.outdir.outputs.OUTPUT_DIR }}"
          cat > "${dir}/metadata.json" << 'EOF'
          {
            "generation_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "prompt": "${{ steps.build_image_prompt.outputs.image_prompt }}",
            "model": "imagen-4-ultra",
            "num_images": 1,
            "aspect_ratio": "16:9",
            "seed": "",
            "workflow_run": "${{ github.run_number }}",
            "commit_sha": "${{ github.sha }}",
            "tag": "${{ steps.ctx.outputs.tag }}"
          }
          EOF
          echo "Created metadata file: ${dir}/metadata.json"

      - name: Commit and push release image
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "${{ steps.outdir.outputs.OUTPUT_DIR }}"/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit \
              -m "üé® Release image for ${{ steps.ctx.outputs.tag }}" \
              -m "Model: imagen-4-ultra" \
              -m "Images: 1" \
              -m "Aspect ratio: 16:9" \
              -m "Generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            git push origin HEAD:${{ github.event.repository.default_branch }}
            echo "‚úÖ Committed release image"
          fi

      - name: Find header image and build raw URL
        id: header
        env:
          OUTPUT_DIR: "${{ steps.outdir.outputs.OUTPUT_DIR }}"
          REPOSITORY: "${{ github.repository }}"
          DEFAULT_BRANCH: "${{ github.event.repository.default_branch }}"
        run: |
          set -euo pipefail
          dir="${OUTPUT_DIR}"
          if [[ -d "${dir}" ]]; then
            # Find the first image file by common extensions
            img=$(ls -1 "${dir}" | grep -Ei '\.(png|jpg|jpeg)$' | head -n 1 || true)
            if [[ -n "${img:-}" ]]; then
              image_path="${dir}/${img}"
              image_name="${img}"
              # Build canonical raw URL: https://raw.githubusercontent.com/<owner>/<repo>/<branch>/<path>
              raw_url="https://raw.githubusercontent.com/${REPOSITORY}/${DEFAULT_BRANCH}/${image_path}"
              echo "image_path=${image_path}" >> "$GITHUB_OUTPUT"
              echo "image_name=${image_name}" >> "$GITHUB_OUTPUT"
              echo "raw_url=${raw_url}" >> "$GITHUB_OUTPUT"
              echo "Found header image: ${image_path}"
              echo "RAW URL: ${raw_url}"
            else
              echo "No image file found in ${dir}"
            fi
          else
            echo "Output dir not found: ${dir}"
          fi

      - name: Generate release notes with Gemini
        id: gemini
        uses: google-github-actions/run-gemini-cli@v0
        env:
          REPOSITORY: "${{ github.repository }}"
          TAG_NAME: "${{ steps.ctx.outputs.tag }}"
          PREV_TAG: "${{ steps.ctx.outputs.prev_tag }}"
          COMPARE_URL: "${{ steps.ctx.outputs.compare_url }}"
          COMMITS: "${{ steps.ctx.outputs.commits }}"
          CHANGED_FILES: "${{ steps.ctx.outputs.files }}"
          CONTRIBUTORS: "${{ steps.ctx.outputs.contributors }}"
          DIFF_STATS: "${{ steps.ctx.outputs.diff_stats }}"
          DIFF_CONTENT: "${{ steps.ctx.outputs.diff_content }}"
        with:
          gemini_api_key: "${{ secrets.GEMINI_API_KEY }}"
          gcp_workload_identity_provider: "${{ vars.GCP_WIF_PROVIDER }}"
          gcp_project_id: "${{ vars.GOOGLE_CLOUD_PROJECT }}"
          gcp_location: "${{ vars.GOOGLE_CLOUD_LOCATION }}"
          gcp_service_account: "${{ vars.SERVICE_ACCOUNT_EMAIL }}"
          use_vertex_ai: "${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}"
          use_gemini_code_assist: "${{ vars.GOOGLE_GENAI_USE_GCA }}"
          settings: |
            { "debug": false, "maxSessionTurns": 10, "telemetry": { "enabled": false, "target": "gcp" } }
          prompt: |
            „ÅÇ„Å™„Åü„ÅØ„É™„É™„Éº„Çπ„Éé„Éº„Éà‰ΩúÊàê„ÅÆ„Ç®„Ç≠„Çπ„Éë„Éº„Éà„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÊÉÖÂ†±„Åã„Çâ„ÄÅÊó•Êú¨Ë™û„ÅßË™≠„Åø„ÇÑ„Åô„ÅÑMarkdown„ÅÆ„É™„É™„Éº„Çπ„Éé„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

            # „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà
            - „É™„Éù„Ç∏„Éà„É™: ${{ github.repository }}
            - „É™„É™„Éº„Çπ„Çø„Ç∞: ${{ steps.ctx.outputs.tag }}
            - Ââç„É™„É™„Éº„Çπ„Çø„Ç∞: ${{ steps.ctx.outputs.prev_tag }}
            - ÊØîËºÉURL: ${{ steps.ctx.outputs.compare_url }}

            # Â§âÊõ¥Áµ±Ë®à
            ${{ steps.ctx.outputs.diff_stats }}

            # „Ç≥„Éº„ÉâÂ∑ÆÂàÜÔºàÂÆüÈöõ„ÅÆÂ§âÊõ¥ÂÜÖÂÆπÔºâ
            ```diff
            ${{ steps.ctx.outputs.diff_content }}
            ```

            # Â§âÊõ¥„Ç≥„Éü„ÉÉ„ÉàÔºàÊäúÁ≤ãÔºâ
            ${{ steps.ctx.outputs.commits }}

            # Â§âÊõ¥„Éï„Ç°„Ç§„É´ÔºàÊäúÁ≤ãÔºâ
            ${{ steps.ctx.outputs.files }}

            # „Ç≥„É≥„Éà„É™„Éì„É•„Éº„Çø„ÉºÔºàÊäúÁ≤ãÔºâ
            ${{ steps.ctx.outputs.contributors }}

            # Âü∑Á≠ÜÊñπÈáù
            - **„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„ÇíÂøÖ„ÅöÂèÇÁÖß**„Åó„Å¶„ÄÅÂÆüÈöõ„ÅÆÂ§âÊõ¥ÂÜÖÂÆπ„ÇíÊ≠£Á¢∫„Å´ÊääÊè°„Åó„Å¶„Åã„Çâ„É™„É™„Éº„Çπ„Éé„Éº„Éà„Çí‰ΩúÊàê„Åô„Çã
            - Ë¶ãÂá∫„Åó„Å®ÁÆáÊù°Êõ∏„Åç„ÇíÁî®„ÅÑ„Å¶Á∞°ÊΩî„Å´
            - ‰∏ª„Å™Â§âÊõ¥ÁÇπ(Highlights)„ÄÅBreaking ChangesÔºà„ÅÇ„Çå„Å∞Ôºâ„ÄÅÊîπÂñÑ„Éª‰øÆÊ≠£„ÄÅË≤¢ÁåÆËÄÖ„ÅÆÈ†Ü„Åß„Åæ„Å®„ÇÅ„Çã
            - ÂèØËÉΩ„Å™„ÇâConventional Commits„ÇíÊâãÊéõ„Åã„Çä„Å´ÂàÜÈ°ûÔºàfeat/fix/docs/chore/refactor/perf/test Á≠âÔºâ
            - „Ç≥„Éº„ÉâÂ∑ÆÂàÜ„Åã„ÇâÈáçÂ§ßÂ§âÊõ¥ÔºàAPIÂ§âÊõ¥„ÄÅÂâäÈô§„Åï„Çå„ÅüÊ©üËÉΩÁ≠âÔºâ„ÇíÊ§úÂá∫„Åó„ÄåBreaking Changes„Äç„Å´ÊòéË®ò
            - Êñ∞Ê©üËÉΩ„ÄÅ„Éê„Ç∞‰øÆÊ≠£„ÄÅÊîπÂñÑÁÇπ„ÇíÂ∑ÆÂàÜ„Åã„ÇâÂÖ∑‰ΩìÁöÑ„Å´ÊäΩÂá∫
            - ÊúÄÂæå„Å´ÊØîËºÉURL„ÇíË®òËºâ
            - Âá∫Âäõ„ÅØMarkdown„ÅÆ„ÅøÔºà‰ΩôË®à„Å™ÂâçÁΩÆ„Åç„ÇÑÂæåÊõ∏„Åç„ÄÅ„Ç≥„Éº„Éâ„Éï„Çß„É≥„Çπ„ÅØ‰∏çË¶ÅÔºâ

            # ÊúüÂæÖ„Åô„ÇãMarkdown„ÅÆÊßãÊàê‰æã
            # ${{ steps.ctx.outputs.tag }} ÔΩû„Åì„ÅÆ„É™„É™„Éº„Çπ„Éé„Éº„Éà„ÅÆÂÜÖÂÆπ„ÅåÂàÜ„Åã„Çã„Çà„ÅÜ„Å™„Çø„Ç§„Éà„É´ÔΩû
            
            ## ‚ú® Highlights
            - ‰∏ªË¶Å„Å™Â§âÊõ¥ÁÇπ„ÅÆË¶ÅÁ¥ÑÔºà„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„Åã„ÇâÂà§Êñ≠Ôºâ

            ## üí• Breaking Changes
            - ÈáçÂ§ß„Å™Â§âÊõ¥ÁÇπÔºàAPIÂ§âÊõ¥„ÄÅÂâäÈô§„Åï„Çå„ÅüÊ©üËÉΩÁ≠â„Çí„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„Åã„ÇâÊ§úÂá∫Ôºâ

            ## üõ† Â§âÊõ¥‰∏ÄË¶ß
            ### ‚ú® Features (feat)
            - Êñ∞Ê©üËÉΩ„ÅÆË©≥Á¥∞Ôºà„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„Åã„ÇâÂà§Êñ≠Ôºâ

            ### üêõ Bug Fixes (fix)  
            - ‰øÆÊ≠£ÂÜÖÂÆπ„ÅÆË©≥Á¥∞Ôºà„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„Åã„ÇâÂà§Êñ≠Ôºâ

            ### üìö Documentation (docs)
            - „Éâ„Ç≠„É•„É°„É≥„ÉàÊõ¥Êñ∞ÂÜÖÂÆπ

            ### üîß Maintenance (chore/refactor)
            - „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞„ÇÑ„É°„É≥„ÉÜ„Éä„É≥„ÇπÂÜÖÂÆπ

            ## üë• Contributors
            - „É¶„Éº„Ç∂„ÉºÂêç‰∏ÄË¶ßÔºàÊäúÁ≤ãÔºâ

            ---
            ÊØîËºÉ: ${{ steps.ctx.outputs.compare_url }}

      - name: Write notes to file (with header image)
        env:
          HEADER_URL: "${{ steps.header.outputs.raw_url }}"
          IMAGE_NAME: "${{ steps.header.outputs.image_name }}"
        run: |
          set -euo pipefail
          : > release_notes.md
          if [[ -n "${HEADER_URL}" && -n "${IMAGE_NAME}" ]]; then
            {
              # Image first at the very top
              echo "![${IMAGE_NAME}](${HEADER_URL})"
              echo
              echo "#### „Éò„ÉÉ„ÉÄ„ÉºÁîªÂÉè: ${IMAGE_NAME}"
              echo "[üîó Áõ¥Êé•„É™„É≥„ÇØ](${HEADER_URL})"
              echo
            } >> release_notes.md
          fi
          # Append the model-generated notes without expanding variables
          cat >> release_notes.md << 'EOF'
          ${{ steps.gemini.outputs.summary }}
          EOF
          echo "Wrote release_notes.md (size: $(wc -c < release_notes.md) bytes)"

      - name: Create or update GitHub Release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          TAG: "${{ steps.ctx.outputs.tag }}"
        run: |
          set -euo pipefail
          if gh release view "${TAG}" >/dev/null 2>&1; then
            gh release edit "${TAG}" --notes-file release_notes.md
          else
            # Mark pre-releases automatically if tag contains pre-release identifiers
            PRERELEASE_FLAG=""
            if [[ "${TAG}" =~ -(alpha|beta|rc) ]]; then PRERELEASE_FLAG="--prerelease"; fi
            gh release create "${TAG}" --title "${TAG}" --notes-file release_notes.md ${PRERELEASE_FLAG}
          fi

      - name: Upload header image to Release assets
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          TAG: "${{ steps.ctx.outputs.tag }}"
          IMAGE_FILE: "${{ steps.header.outputs.image_path }}"
        run: |
          set -euo pipefail
          if [[ -n "${IMAGE_FILE}" && -f "${IMAGE_FILE}" ]]; then
            gh release upload "${TAG}" "${IMAGE_FILE}" --clobber
            echo "‚úÖ Uploaded header image asset: ${IMAGE_FILE}"
          else
            echo "No header image to upload"
          fi
