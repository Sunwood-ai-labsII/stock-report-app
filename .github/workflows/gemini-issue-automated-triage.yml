name: '🏷️ Gemini Automated Issue Triage'

on:
  issues:
    types: [opened, reopened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'issue number to triage'
        required: true
        type: number

permissions:
  contents: read
  issues: write
  id-token: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Get Issue Info
        id: issue
        env:
          INPUT_ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        uses: actions/github-script@v7
        with:
          script: |
            let issue;
            if (context.eventName === 'workflow_dispatch') {
              const issueNumber = parseInt(process.env.INPUT_ISSUE_NUMBER);
              const { data } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              issue = data;
            } else {
              issue = context.payload.issue;
            }
            core.setOutput('number', issue.number);
            core.setOutput('title', issue.title || '');
            core.setOutput('body', issue.body || '');

      - name: Get Labels
        id: labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = await github.paginate(github.rest.issues.listLabelsForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const names = labels.map(l => l.name);
            core.setOutput('available', names.join(','));
            return names.join(',');

      - name: Analyze with Gemini
        id: gemini
        uses: google-github-actions/run-gemini-cli@v0
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          # ← ここは ${{ ... }} で式展開するのがポイント
          prompt: |
            You are a GitHub issue triage assistant.
            Issue Title: ${{ steps.issue.outputs.title }}
            Issue Body:
            ---
            ${{ steps.issue.outputs.body }}
            ---
            Available Labels (comma-separated): ${{ steps.labels.outputs.available }}

            Task: Choose the MOST relevant labels from the available list only.
            Return EXACTLY this XML (no prose, no markdown):
            <labels>
            <label>label-1</label>
            <label>label-2</label>
            </labels>


      - name: Apply Labels
        uses: actions/github-script@v7
        env:
          GEMINI_OUTPUT: ${{ steps.gemini.outputs.text || steps.gemini.outputs.summary }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.number }}
        with:
          script: |
            const raw = process.env.GEMINI_OUTPUT || '';
            const issueNumber = parseInt(process.env.ISSUE_NUMBER);
      
            console.log('Gemini output:', raw);
      
            let labels = [];
            const matches = raw.match(/<label>(.*?)<\/label>/gis);
            if (matches) {
              labels = matches
                .map(m => m.replace(/<\/?label>/gi, '').trim())
                .filter(Boolean);
              console.log('Extracted labels from XML:', labels);
            } else {
              throw new Error('❌ Gemini output に <label> タグが見つかりませんでした');
            }
      
            // ラベルごとに存在チェック → 無ければ作成
            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label,
                });
                console.log(`Label "${label}" already exists`);
              } catch (err) {
                if (err.status === 404) {
                  console.log(`Label "${label}" does not exist. Creating...`);
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label,
                    color: 'ededed',   // デフォルト色。必要なら調整
                    description: `Created automatically by Gemini triage`,
                  });
                } else {
                  throw err;
                }
              }
            }
      
            // すべて存在するはずなのでまとめて適用
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels,
            });
            console.log(`✅ Applied labels: ${labels.join(', ')}`);

